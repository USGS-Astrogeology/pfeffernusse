# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from pfeffernusse.models.base_model_ import Model
from pfeffernusse.models.isd200_detector_center import ISD200DetectorCenter  # noqa: F401,E501
from pfeffernusse.models.isd200_focal_length_model import ISD200FocalLengthModel  # noqa: F401,E501
from pfeffernusse.models.isd200_radii import ISD200Radii  # noqa: F401,E501
from pfeffernusse.models.isd200_reference_height import ISD200ReferenceHeight  # noqa: F401,E501
from pfeffernusse.models.optical_distortion import OpticalDistortion  # noqa: F401,E501
from pfeffernusse.models.quaternions import Quaternions  # noqa: F401,E501
from pfeffernusse.models.xyz import XYZ  # noqa: F401,E501
from pfeffernusse import util


class ISD200(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detector_center: ISD200DetectorCenter=None, center_ephemeris_time: float=None, model_name: str=None, starting_ephemeris_time: float=None, focal_length_model: ISD200FocalLengthModel=None, image_lines: float=None, image_samples: float=None, radii: ISD200Radii=None, optical_distortion: OpticalDistortion=None, starting_detector_sample: float=None, starting_detector_line: float=None, focal2pixel_samples: List[float]=None, focal2pixel_lines: List[float]=None, sensor_location: XYZ=None, sensor_velocity: XYZ=None, sun_position: XYZ=None, sun_velocity: XYZ=None, sensor_orientation: Quaternions=None, line_scan_rate: List[List[float]]=None, detector_sample_summing: float=None, detector_line_summing: float=None, dt_ephemeris: float=None, t0_ephemeris: float=None, dt_quaternion: float=None, t0_quaternion: float=None, reference_height: ISD200ReferenceHeight=None, interpolation_method: str=None):  # noqa: E501
        """ISD200 - a model defined in OpenAPI

        :param detector_center: The detector_center of this ISD200.  # noqa: E501
        :type detector_center: ISD200DetectorCenter
        :param center_ephemeris_time: The center_ephemeris_time of this ISD200.  # noqa: E501
        :type center_ephemeris_time: float
        :param model_name: The model_name of this ISD200.  # noqa: E501
        :type model_name: str
        :param starting_ephemeris_time: The starting_ephemeris_time of this ISD200.  # noqa: E501
        :type starting_ephemeris_time: float
        :param focal_length_model: The focal_length_model of this ISD200.  # noqa: E501
        :type focal_length_model: ISD200FocalLengthModel
        :param image_lines: The image_lines of this ISD200.  # noqa: E501
        :type image_lines: float
        :param image_samples: The image_samples of this ISD200.  # noqa: E501
        :type image_samples: float
        :param radii: The radii of this ISD200.  # noqa: E501
        :type radii: ISD200Radii
        :param optical_distortion: The optical_distortion of this ISD200.  # noqa: E501
        :type optical_distortion: OpticalDistortion
        :param starting_detector_sample: The starting_detector_sample of this ISD200.  # noqa: E501
        :type starting_detector_sample: float
        :param starting_detector_line: The starting_detector_line of this ISD200.  # noqa: E501
        :type starting_detector_line: float
        :param focal2pixel_samples: The focal2pixel_samples of this ISD200.  # noqa: E501
        :type focal2pixel_samples: List[float]
        :param focal2pixel_lines: The focal2pixel_lines of this ISD200.  # noqa: E501
        :type focal2pixel_lines: List[float]
        :param sensor_location: The sensor_location of this ISD200.  # noqa: E501
        :type sensor_location: XYZ
        :param sensor_velocity: The sensor_velocity of this ISD200.  # noqa: E501
        :type sensor_velocity: XYZ
        :param sun_position: The sun_position of this ISD200.  # noqa: E501
        :type sun_position: XYZ
        :param sun_velocity: The sun_velocity of this ISD200.  # noqa: E501
        :type sun_velocity: XYZ
        :param sensor_orientation: The sensor_orientation of this ISD200.  # noqa: E501
        :type sensor_orientation: Quaternions
        :param line_scan_rate: The line_scan_rate of this ISD200.  # noqa: E501
        :type line_scan_rate: List[List[float]]
        :param detector_sample_summing: The detector_sample_summing of this ISD200.  # noqa: E501
        :type detector_sample_summing: float
        :param detector_line_summing: The detector_line_summing of this ISD200.  # noqa: E501
        :type detector_line_summing: float
        :param dt_ephemeris: The dt_ephemeris of this ISD200.  # noqa: E501
        :type dt_ephemeris: float
        :param t0_ephemeris: The t0_ephemeris of this ISD200.  # noqa: E501
        :type t0_ephemeris: float
        :param dt_quaternion: The dt_quaternion of this ISD200.  # noqa: E501
        :type dt_quaternion: float
        :param t0_quaternion: The t0_quaternion of this ISD200.  # noqa: E501
        :type t0_quaternion: float
        :param reference_height: The reference_height of this ISD200.  # noqa: E501
        :type reference_height: ISD200ReferenceHeight
        :param interpolation_method: The interpolation_method of this ISD200.  # noqa: E501
        :type interpolation_method: str
        """
        self.openapi_types = {
            'detector_center': ISD200DetectorCenter,
            'center_ephemeris_time': float,
            'model_name': str,
            'starting_ephemeris_time': float,
            'focal_length_model': ISD200FocalLengthModel,
            'image_lines': float,
            'image_samples': float,
            'radii': ISD200Radii,
            'optical_distortion': OpticalDistortion,
            'starting_detector_sample': float,
            'starting_detector_line': float,
            'focal2pixel_samples': List[float],
            'focal2pixel_lines': List[float],
            'sensor_location': XYZ,
            'sensor_velocity': XYZ,
            'sun_position': XYZ,
            'sun_velocity': XYZ,
            'sensor_orientation': Quaternions,
            'line_scan_rate': List[List[float]],
            'detector_sample_summing': float,
            'detector_line_summing': float,
            'dt_ephemeris': float,
            't0_ephemeris': float,
            'dt_quaternion': float,
            't0_quaternion': float,
            'reference_height': ISD200ReferenceHeight,
            'interpolation_method': str
        }

        self.attribute_map = {
            'detector_center': 'detector_center',
            'center_ephemeris_time': 'center_ephemeris_time',
            'model_name': 'model_name',
            'starting_ephemeris_time': 'starting_ephemeris_time',
            'focal_length_model': 'focal_length_model',
            'image_lines': 'image_lines',
            'image_samples': 'image_samples',
            'radii': 'radii',
            'optical_distortion': 'optical_distortion',
            'starting_detector_sample': 'starting_detector_sample',
            'starting_detector_line': 'starting_detector_line',
            'focal2pixel_samples': 'focal2pixel_samples',
            'focal2pixel_lines': 'focal2pixel_lines',
            'sensor_location': 'sensor_location',
            'sensor_velocity': 'sensor_velocity',
            'sun_position': 'sun_position',
            'sun_velocity': 'sun_velocity',
            'sensor_orientation': 'sensor_orientation',
            'line_scan_rate': 'line_scan_rate',
            'detector_sample_summing': 'detector_sample_summing',
            'detector_line_summing': 'detector_line_summing',
            'dt_ephemeris': 'dt_ephemeris',
            't0_ephemeris': 't0_ephemeris',
            'dt_quaternion': 'dt_quaternion',
            't0_quaternion': 't0_quaternion',
            'reference_height': 'reference_height',
            'interpolation_method': 'interpolation_method'
        }

        self._detector_center = detector_center
        self._center_ephemeris_time = center_ephemeris_time
        self._model_name = model_name
        self._starting_ephemeris_time = starting_ephemeris_time
        self._focal_length_model = focal_length_model
        self._image_lines = image_lines
        self._image_samples = image_samples
        self._radii = radii
        self._optical_distortion = optical_distortion
        self._starting_detector_sample = starting_detector_sample
        self._starting_detector_line = starting_detector_line
        self._focal2pixel_samples = focal2pixel_samples
        self._focal2pixel_lines = focal2pixel_lines
        self._sensor_location = sensor_location
        self._sensor_velocity = sensor_velocity
        self._sun_position = sun_position
        self._sun_velocity = sun_velocity
        self._sensor_orientation = sensor_orientation
        self._line_scan_rate = line_scan_rate
        self._detector_sample_summing = detector_sample_summing
        self._detector_line_summing = detector_line_summing
        self._dt_ephemeris = dt_ephemeris
        self._t0_ephemeris = t0_ephemeris
        self._dt_quaternion = dt_quaternion
        self._t0_quaternion = t0_quaternion
        self._reference_height = reference_height
        self._interpolation_method = interpolation_method

    @classmethod
    def from_dict(cls, dikt) -> 'ISD200':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ISD200 of this ISD200.  # noqa: E501
        :rtype: ISD200
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detector_center(self) -> ISD200DetectorCenter:
        """Gets the detector_center of this ISD200.


        :return: The detector_center of this ISD200.
        :rtype: ISD200DetectorCenter
        """
        return self._detector_center

    @detector_center.setter
    def detector_center(self, detector_center: ISD200DetectorCenter):
        """Sets the detector_center of this ISD200.


        :param detector_center: The detector_center of this ISD200.
        :type detector_center: ISD200DetectorCenter
        """

        self._detector_center = detector_center

    @property
    def center_ephemeris_time(self) -> float:
        """Gets the center_ephemeris_time of this ISD200.

        The center ephemeris time of the image  # noqa: E501

        :return: The center_ephemeris_time of this ISD200.
        :rtype: float
        """
        return self._center_ephemeris_time

    @center_ephemeris_time.setter
    def center_ephemeris_time(self, center_ephemeris_time: float):
        """Sets the center_ephemeris_time of this ISD200.

        The center ephemeris time of the image  # noqa: E501

        :param center_ephemeris_time: The center_ephemeris_time of this ISD200.
        :type center_ephemeris_time: float
        """

        self._center_ephemeris_time = center_ephemeris_time

    @property
    def model_name(self) -> str:
        """Gets the model_name of this ISD200.

        The name of the model to be instantiated  # noqa: E501

        :return: The model_name of this ISD200.
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name: str):
        """Sets the model_name of this ISD200.

        The name of the model to be instantiated  # noqa: E501

        :param model_name: The model_name of this ISD200.
        :type model_name: str
        """
        if model_name is None:
            raise ValueError("Invalid value for `model_name`, must not be `None`")  # noqa: E501

        self._model_name = model_name

    @property
    def starting_ephemeris_time(self) -> float:
        """Gets the starting_ephemeris_time of this ISD200.

        The starting ephemeris time of the image  # noqa: E501

        :return: The starting_ephemeris_time of this ISD200.
        :rtype: float
        """
        return self._starting_ephemeris_time

    @starting_ephemeris_time.setter
    def starting_ephemeris_time(self, starting_ephemeris_time: float):
        """Sets the starting_ephemeris_time of this ISD200.

        The starting ephemeris time of the image  # noqa: E501

        :param starting_ephemeris_time: The starting_ephemeris_time of this ISD200.
        :type starting_ephemeris_time: float
        """
        if starting_ephemeris_time is None:
            raise ValueError("Invalid value for `starting_ephemeris_time`, must not be `None`")  # noqa: E501

        self._starting_ephemeris_time = starting_ephemeris_time

    @property
    def focal_length_model(self) -> ISD200FocalLengthModel:
        """Gets the focal_length_model of this ISD200.


        :return: The focal_length_model of this ISD200.
        :rtype: ISD200FocalLengthModel
        """
        return self._focal_length_model

    @focal_length_model.setter
    def focal_length_model(self, focal_length_model: ISD200FocalLengthModel):
        """Sets the focal_length_model of this ISD200.


        :param focal_length_model: The focal_length_model of this ISD200.
        :type focal_length_model: ISD200FocalLengthModel
        """
        if focal_length_model is None:
            raise ValueError("Invalid value for `focal_length_model`, must not be `None`")  # noqa: E501

        self._focal_length_model = focal_length_model

    @property
    def image_lines(self) -> float:
        """Gets the image_lines of this ISD200.

        The number of lines in the image  # noqa: E501

        :return: The image_lines of this ISD200.
        :rtype: float
        """
        return self._image_lines

    @image_lines.setter
    def image_lines(self, image_lines: float):
        """Sets the image_lines of this ISD200.

        The number of lines in the image  # noqa: E501

        :param image_lines: The image_lines of this ISD200.
        :type image_lines: float
        """
        if image_lines is None:
            raise ValueError("Invalid value for `image_lines`, must not be `None`")  # noqa: E501

        self._image_lines = image_lines

    @property
    def image_samples(self) -> float:
        """Gets the image_samples of this ISD200.

        The the number of samples in the image  # noqa: E501

        :return: The image_samples of this ISD200.
        :rtype: float
        """
        return self._image_samples

    @image_samples.setter
    def image_samples(self, image_samples: float):
        """Sets the image_samples of this ISD200.

        The the number of samples in the image  # noqa: E501

        :param image_samples: The image_samples of this ISD200.
        :type image_samples: float
        """
        if image_samples is None:
            raise ValueError("Invalid value for `image_samples`, must not be `None`")  # noqa: E501

        self._image_samples = image_samples

    @property
    def radii(self) -> ISD200Radii:
        """Gets the radii of this ISD200.


        :return: The radii of this ISD200.
        :rtype: ISD200Radii
        """
        return self._radii

    @radii.setter
    def radii(self, radii: ISD200Radii):
        """Sets the radii of this ISD200.


        :param radii: The radii of this ISD200.
        :type radii: ISD200Radii
        """
        if radii is None:
            raise ValueError("Invalid value for `radii`, must not be `None`")  # noqa: E501

        self._radii = radii

    @property
    def optical_distortion(self) -> OpticalDistortion:
        """Gets the optical_distortion of this ISD200.


        :return: The optical_distortion of this ISD200.
        :rtype: OpticalDistortion
        """
        return self._optical_distortion

    @optical_distortion.setter
    def optical_distortion(self, optical_distortion: OpticalDistortion):
        """Sets the optical_distortion of this ISD200.


        :param optical_distortion: The optical_distortion of this ISD200.
        :type optical_distortion: OpticalDistortion
        """

        self._optical_distortion = optical_distortion

    @property
    def starting_detector_sample(self) -> float:
        """Gets the starting_detector_sample of this ISD200.

        The sample on the detector where the data starts  # noqa: E501

        :return: The starting_detector_sample of this ISD200.
        :rtype: float
        """
        return self._starting_detector_sample

    @starting_detector_sample.setter
    def starting_detector_sample(self, starting_detector_sample: float):
        """Sets the starting_detector_sample of this ISD200.

        The sample on the detector where the data starts  # noqa: E501

        :param starting_detector_sample: The starting_detector_sample of this ISD200.
        :type starting_detector_sample: float
        """
        if starting_detector_sample is None:
            raise ValueError("Invalid value for `starting_detector_sample`, must not be `None`")  # noqa: E501

        self._starting_detector_sample = starting_detector_sample

    @property
    def starting_detector_line(self) -> float:
        """Gets the starting_detector_line of this ISD200.

        The line on the detector where the data starts  # noqa: E501

        :return: The starting_detector_line of this ISD200.
        :rtype: float
        """
        return self._starting_detector_line

    @starting_detector_line.setter
    def starting_detector_line(self, starting_detector_line: float):
        """Sets the starting_detector_line of this ISD200.

        The line on the detector where the data starts  # noqa: E501

        :param starting_detector_line: The starting_detector_line of this ISD200.
        :type starting_detector_line: float
        """
        if starting_detector_line is None:
            raise ValueError("Invalid value for `starting_detector_line`, must not be `None`")  # noqa: E501

        self._starting_detector_line = starting_detector_line

    @property
    def focal2pixel_samples(self) -> List[float]:
        """Gets the focal2pixel_samples of this ISD200.

        Transformation x coefficients from focal plane (mm) to detector pixel coordinates  # noqa: E501

        :return: The focal2pixel_samples of this ISD200.
        :rtype: List[float]
        """
        return self._focal2pixel_samples

    @focal2pixel_samples.setter
    def focal2pixel_samples(self, focal2pixel_samples: List[float]):
        """Sets the focal2pixel_samples of this ISD200.

        Transformation x coefficients from focal plane (mm) to detector pixel coordinates  # noqa: E501

        :param focal2pixel_samples: The focal2pixel_samples of this ISD200.
        :type focal2pixel_samples: List[float]
        """
        if focal2pixel_samples is None:
            raise ValueError("Invalid value for `focal2pixel_samples`, must not be `None`")  # noqa: E501

        self._focal2pixel_samples = focal2pixel_samples

    @property
    def focal2pixel_lines(self) -> List[float]:
        """Gets the focal2pixel_lines of this ISD200.

        Transformation y coefficients from focal plane (mm) to detector pixel coordinates  # noqa: E501

        :return: The focal2pixel_lines of this ISD200.
        :rtype: List[float]
        """
        return self._focal2pixel_lines

    @focal2pixel_lines.setter
    def focal2pixel_lines(self, focal2pixel_lines: List[float]):
        """Sets the focal2pixel_lines of this ISD200.

        Transformation y coefficients from focal plane (mm) to detector pixel coordinates  # noqa: E501

        :param focal2pixel_lines: The focal2pixel_lines of this ISD200.
        :type focal2pixel_lines: List[float]
        """
        if focal2pixel_lines is None:
            raise ValueError("Invalid value for `focal2pixel_lines`, must not be `None`")  # noqa: E501

        self._focal2pixel_lines = focal2pixel_lines

    @property
    def sensor_location(self) -> XYZ:
        """Gets the sensor_location of this ISD200.


        :return: The sensor_location of this ISD200.
        :rtype: XYZ
        """
        return self._sensor_location

    @sensor_location.setter
    def sensor_location(self, sensor_location: XYZ):
        """Sets the sensor_location of this ISD200.


        :param sensor_location: The sensor_location of this ISD200.
        :type sensor_location: XYZ
        """

        self._sensor_location = sensor_location

    @property
    def sensor_velocity(self) -> XYZ:
        """Gets the sensor_velocity of this ISD200.


        :return: The sensor_velocity of this ISD200.
        :rtype: XYZ
        """
        return self._sensor_velocity

    @sensor_velocity.setter
    def sensor_velocity(self, sensor_velocity: XYZ):
        """Sets the sensor_velocity of this ISD200.


        :param sensor_velocity: The sensor_velocity of this ISD200.
        :type sensor_velocity: XYZ
        """

        self._sensor_velocity = sensor_velocity

    @property
    def sun_position(self) -> XYZ:
        """Gets the sun_position of this ISD200.


        :return: The sun_position of this ISD200.
        :rtype: XYZ
        """
        return self._sun_position

    @sun_position.setter
    def sun_position(self, sun_position: XYZ):
        """Sets the sun_position of this ISD200.


        :param sun_position: The sun_position of this ISD200.
        :type sun_position: XYZ
        """

        self._sun_position = sun_position

    @property
    def sun_velocity(self) -> XYZ:
        """Gets the sun_velocity of this ISD200.


        :return: The sun_velocity of this ISD200.
        :rtype: XYZ
        """
        return self._sun_velocity

    @sun_velocity.setter
    def sun_velocity(self, sun_velocity: XYZ):
        """Sets the sun_velocity of this ISD200.


        :param sun_velocity: The sun_velocity of this ISD200.
        :type sun_velocity: XYZ
        """

        self._sun_velocity = sun_velocity

    @property
    def sensor_orientation(self) -> Quaternions:
        """Gets the sensor_orientation of this ISD200.


        :return: The sensor_orientation of this ISD200.
        :rtype: Quaternions
        """
        return self._sensor_orientation

    @sensor_orientation.setter
    def sensor_orientation(self, sensor_orientation: Quaternions):
        """Sets the sensor_orientation of this ISD200.


        :param sensor_orientation: The sensor_orientation of this ISD200.
        :type sensor_orientation: Quaternions
        """
        if sensor_orientation is None:
            raise ValueError("Invalid value for `sensor_orientation`, must not be `None`")  # noqa: E501

        self._sensor_orientation = sensor_orientation

    @property
    def line_scan_rate(self) -> List[List[float]]:
        """Gets the line_scan_rate of this ISD200.

        The line rates of the detector map with the associated start line and time  # noqa: E501

        :return: The line_scan_rate of this ISD200.
        :rtype: List[List[float]]
        """
        return self._line_scan_rate

    @line_scan_rate.setter
    def line_scan_rate(self, line_scan_rate: List[List[float]]):
        """Sets the line_scan_rate of this ISD200.

        The line rates of the detector map with the associated start line and time  # noqa: E501

        :param line_scan_rate: The line_scan_rate of this ISD200.
        :type line_scan_rate: List[List[float]]
        """

        self._line_scan_rate = line_scan_rate

    @property
    def detector_sample_summing(self) -> float:
        """Gets the detector_sample_summing of this ISD200.

        The summing in the sample-direction. A summing of 1 indicates no summing, summing of 2 indicates 2 pixel summing,4 indicates 4 pixel summing, etc   # noqa: E501

        :return: The detector_sample_summing of this ISD200.
        :rtype: float
        """
        return self._detector_sample_summing

    @detector_sample_summing.setter
    def detector_sample_summing(self, detector_sample_summing: float):
        """Sets the detector_sample_summing of this ISD200.

        The summing in the sample-direction. A summing of 1 indicates no summing, summing of 2 indicates 2 pixel summing,4 indicates 4 pixel summing, etc   # noqa: E501

        :param detector_sample_summing: The detector_sample_summing of this ISD200.
        :type detector_sample_summing: float
        """

        self._detector_sample_summing = detector_sample_summing

    @property
    def detector_line_summing(self) -> float:
        """Gets the detector_line_summing of this ISD200.

        The summing in the line-direction  # noqa: E501

        :return: The detector_line_summing of this ISD200.
        :rtype: float
        """
        return self._detector_line_summing

    @detector_line_summing.setter
    def detector_line_summing(self, detector_line_summing: float):
        """Sets the detector_line_summing of this ISD200.

        The summing in the line-direction  # noqa: E501

        :param detector_line_summing: The detector_line_summing of this ISD200.
        :type detector_line_summing: float
        """

        self._detector_line_summing = detector_line_summing

    @property
    def dt_ephemeris(self) -> float:
        """Gets the dt_ephemeris of this ISD200.

        The time between each ephemeris point.  # noqa: E501

        :return: The dt_ephemeris of this ISD200.
        :rtype: float
        """
        return self._dt_ephemeris

    @dt_ephemeris.setter
    def dt_ephemeris(self, dt_ephemeris: float):
        """Sets the dt_ephemeris of this ISD200.

        The time between each ephemeris point.  # noqa: E501

        :param dt_ephemeris: The dt_ephemeris of this ISD200.
        :type dt_ephemeris: float
        """

        self._dt_ephemeris = dt_ephemeris

    @property
    def t0_ephemeris(self) -> float:
        """Gets the t0_ephemeris of this ISD200.

        First ephemeris time - center image time  # noqa: E501

        :return: The t0_ephemeris of this ISD200.
        :rtype: float
        """
        return self._t0_ephemeris

    @t0_ephemeris.setter
    def t0_ephemeris(self, t0_ephemeris: float):
        """Sets the t0_ephemeris of this ISD200.

        First ephemeris time - center image time  # noqa: E501

        :param t0_ephemeris: The t0_ephemeris of this ISD200.
        :type t0_ephemeris: float
        """

        self._t0_ephemeris = t0_ephemeris

    @property
    def dt_quaternion(self) -> float:
        """Gets the dt_quaternion of this ISD200.

        Time spacing of quaternions.  # noqa: E501

        :return: The dt_quaternion of this ISD200.
        :rtype: float
        """
        return self._dt_quaternion

    @dt_quaternion.setter
    def dt_quaternion(self, dt_quaternion: float):
        """Sets the dt_quaternion of this ISD200.

        Time spacing of quaternions.  # noqa: E501

        :param dt_quaternion: The dt_quaternion of this ISD200.
        :type dt_quaternion: float
        """

        self._dt_quaternion = dt_quaternion

    @property
    def t0_quaternion(self) -> float:
        """Gets the t0_quaternion of this ISD200.

        First quaternion time - center image time.  # noqa: E501

        :return: The t0_quaternion of this ISD200.
        :rtype: float
        """
        return self._t0_quaternion

    @t0_quaternion.setter
    def t0_quaternion(self, t0_quaternion: float):
        """Sets the t0_quaternion of this ISD200.

        First quaternion time - center image time.  # noqa: E501

        :param t0_quaternion: The t0_quaternion of this ISD200.
        :type t0_quaternion: float
        """

        self._t0_quaternion = t0_quaternion

    @property
    def reference_height(self) -> ISD200ReferenceHeight:
        """Gets the reference_height of this ISD200.


        :return: The reference_height of this ISD200.
        :rtype: ISD200ReferenceHeight
        """
        return self._reference_height

    @reference_height.setter
    def reference_height(self, reference_height: ISD200ReferenceHeight):
        """Sets the reference_height of this ISD200.


        :param reference_height: The reference_height of this ISD200.
        :type reference_height: ISD200ReferenceHeight
        """
        if reference_height is None:
            raise ValueError("Invalid value for `reference_height`, must not be `None`")  # noqa: E501

        self._reference_height = reference_height

    @property
    def interpolation_method(self) -> str:
        """Gets the interpolation_method of this ISD200.

        The type of interpolation method to use.  # noqa: E501

        :return: The interpolation_method of this ISD200.
        :rtype: str
        """
        return self._interpolation_method

    @interpolation_method.setter
    def interpolation_method(self, interpolation_method: str):
        """Sets the interpolation_method of this ISD200.

        The type of interpolation method to use.  # noqa: E501

        :param interpolation_method: The interpolation_method of this ISD200.
        :type interpolation_method: str
        """
        allowed_values = ["lagrange"]  # noqa: E501
        if interpolation_method not in allowed_values:
            raise ValueError(
                "Invalid value for `interpolation_method` ({0}), must be one of {1}"
                .format(interpolation_method, allowed_values)
            )

        self._interpolation_method = interpolation_method
